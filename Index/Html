
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>The Song Shack — AI Songwriting Studio</title>
<meta name="description" content="Write lyrics, generate chords, record takes, and design cover art — all in your browser." />
<style>
:root{
  --bg:#0a0f1a; --card:#121935; --border:#263157; --text:#eef2ff; --muted:#aab1c9; --brand:#a7d363;
}
*{box-sizing:border-box} body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,system-ui,Segoe UI,Roboto,Arial,sans-serif;line-height:1.6}
a{color:var(--brand);text-decoration:none}
.container{max-width:1100px;margin:0 auto;padding:24px}
h1,h2{line-height:1.2;margin:0 0 12px}
h1{font-size:2.2rem} h2{font-size:1.4rem;margin-top:28px}
.card{background:var(--card);border:1px solid var(--border);border-radius:14px;padding:16px;margin:16px 0}
.row{display:grid;gap:16px}
@media(min-width:960px){.row{grid-template-columns:1fr 1fr}}
label{display:block;font-size:.9rem;color:var(--muted);margin:6px 0}
input,textarea,select,button{
  width:100%;padding:10px;border-radius:10px;border:1px solid var(--border);background:#0c1022;color:var(--text)
}
button{cursor:pointer;font-weight:600}
.btn{background:var(--brand);color:#08111f;border:none}
.kbd{background:#0c1022;border:1px solid var(--border);padding:2px 6px;border-radius:6px;font-size:.85rem}
.small{color:var(--muted);font-size:.9rem}
.flex{display:flex;gap:8px;flex-wrap:wrap}
canvas{max-width:100%;background:#000;border-radius:10px;border:1px solid var(--border)}
.mono{font-family:ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;white-space:pre-wrap}
.badge{display:inline-block;background:#0c1022;border:1px solid var(--border);padding:2px 8px;border-radius:999px;color:var(--muted);font-size:.8rem}
footer{margin:24px 0;color:var(--muted);font-size:.9rem}
</style>
</head>
<body>
  <div class="container">
    <h1>AI Songwriting Studio <span class="badge">Beta</span></h1>
    <p class="small">Create lyrics and chord ideas, record takes, and design cover art — all in your browser. Your audio stays local until you download it.</p>

    <div class="row">
      <!-- LYRICS -->
      <section class="card">
        <h2>Lyric Helper</h2>
        <label>Style / vibe</label>
        <select id="lyricStyle">
          <option>Pop anthem (confident, uplifting)</option>
          <option>Indie folk (intimate, poetic)</option>
          <option>R&B (soulful, romantic)</option>
          <option>Hip-hop (storytelling, punchy)</option>
          <option>Country (narrative, small-town)</option>
          <option>Rock (gritty, energetic)</option>
        </select>
        <label>Topic / seed idea</label>
        <input id="lyricSeed" placeholder="e.g., leaving home to chase a dream" />
        <div class="flex">
          <button class="btn" id="genLyrics">Generate lyrics</button>
          <button id="clearLyrics">Clear</button>
        </div>
        <label>Draft</label>
        <textarea id="lyrics" rows="12" class="mono" placeholder="[Your lyrics will appear here]"></textarea>
        <p class="small">Tip: Press <span class="kbd">Cmd/Ctrl</span> + <span class="kbd">Enter</span> to regenerate with the same settings.</p>
        <p class="small">Want full AI (GPT) text? Add a serverless endpoint later — see <span class="kbd">// TODO: enableRealAI()</span> in the script.</p>
      </section>

      <!-- CHORDS + METRONOME -->
      <section class="card">
        <h2>Chords &amp; Metronome</h2>
        <div class="flex">
          <label style="flex:1">Key
            <select id="keySel">
              <option>C</option><option>G</option><option>D</option><option>A</option><option>E</option>
              <option>F</option><option>B♭</option><option>E♭</option>
              <option>Am</option><option>Em</option><option>Dm</option><option>Bm</option>
            </select>
          </label>
          <label style="flex:1">Progression
            <select id="progSel">
              <option value="1-5-6-4">I–V–vi–IV (pop)</option>
              <option value="6-4-1-5">vi–IV–I–V (emo/pop)</option>
              <option value="1-6-4-5">I–vi–IV–V (50s)</option>
              <option value="2-5-1-6">ii–V–I–vi (jazzy)</option>
              <option value="1-4-5-4">I–IV–V–IV (rock)</option>
              <option value="1-5-4-5">I–V–IV–V (country)</option>
            </select>
          </label>
        </div>
        <div class="flex">
          <button class="btn" id="genChords">Generate chords</button>
          <button id="swapMode">Major/minor swap</button>
        </div>
        <textarea id="chordsOut" rows="6" class="mono" placeholder="[Chords appear here]"></textarea>

        <h2>Metronome</h2>
        <div class="flex">
          <label style="flex:1">BPM
            <input id="bpm" type="number" min="40" max="220" value="90"/>
          </label>
          <label style="flex:1">Time
            <select id="meter">
              <option>4/4</option><option>3/4</option><option>6/8</option>
            </select>
          </label>
        </div>
        <div class="flex">
          <button class="btn" id="startClick">Start</button>
          <button id="stopClick">Stop</button>
        </div>
      </section>
    </div>

    <!-- RECORDER -->
    <section class="card">
      <h2>Recorder</h2>
      <p class="small">Use headphones to avoid echo. On iPhone, Safari records to WebM/Opus (download works great).</p>
      <div class="flex">
        <button class="btn" id="startRec">Record</button>
        <button id="pauseRec" disabled>Pause</button>
        <button id="stopRec" disabled>Stop</button>
      </div>
      <div id="recordings"></div>
    </section>

    <!-- COVER ART DESIGNER -->
    <section class="card">
      <h2>Cover Art Designer (3000×3000)</h2>
      <div class="flex">
        <label style="flex:1">Title <input id="artTitle" placeholder="Song Title" /></label>
        <label style="flex:1">Artist <input id="artArtist" placeholder="Artist Name" /></label>
      </div>
      <div class="flex">
        <input type="file" id="artImage" accept="image/*" />
        <button class="btn" id="renderArt">Render</button>
        <a id="downloadArt" class="btn" download="cover-art.jpg" style="display:none;text-align:center">Download JPG</a>
      </div>
      <canvas id="artCanvas" width="3000" height="3000"></canvas>
      <p class="small">Tip: Use a bold photo, short title, and high contrast for streaming thumbnails.</p>
    </section>

    <footer>
      <strong>AI Mission (The Song Shack):</strong> AI doesn’t replace artists—it <em>amplifies</em> them. We use AI tools to spark ideas, organize thoughts, and speed up workflows. You own your recordings, lyrics, and artwork created here. Keep your references original or licensed, and you’re good to monetize.
    </footer>
  </div>

<script>
/* =========================
   L Y R I C   H E L P E R
   ========================= */
const styles = {
  "Pop anthem (confident, uplifting)":[
    "VERSE 1:\nI was a flicker in the dark, now I'm burning like the sun\n{seed}\nPRE:\nEvery step is a drum, every doubt comes undone\nCHORUS:\nHands up, hearts loud, we’re writing our names in the clouds\nWe won’t fade out, no, we won’t fade out\nPOST: oh-oh, oh-oh"
  ],
  "Indie folk (intimate, poetic)":[
    "VERSE 1:\n{seed}\nThe porch light hums a lullaby, coffee stains and summer skies\nCHORUS:\nSay we’ll keep the little things, all the maps and in-between\nIf we get lost, we’ll sing our way back home"
  ],
  "R&B (soulful, romantic)":[
    "VERSE 1:\nQuarter past midnight, city in slow-motion\n{seed}\nCHORUS:\nIf loving you’s a rhythm, I don’t ever want to break it\nLay your heartbeat on my heart and we can sync, baby"
  ],
  "Hip-hop (storytelling, punchy)":[
    "INTRO:\n808s on the dashboard, truth in the glovebox\nVERSE 1:\n{seed}\nHOOK:\nTurn the page, write it big, pen bleeds gold when I live"
  ],
  "Country (narrative, small-town)":[
    "VERSE 1:\n{seed}\nDust on the mailbox, friday night lights\nCHORUS:\nWe ain’t rich but the stars don’t charge cover\nWindows down, that’s a million-dollar summer"
  ],
  "Rock (gritty, energetic)":[
    "VERSE 1:\nSteel-toe thunder on the pavement, neon long as the night\n{seed}\nCHORUS:\nShout it like a siren, set the city on fire\nNo brakes, no quiet, we’re alive and wired"
  ],
};

function idea(style, seed){
  const bank = styles[style] || styles["Pop anthem (confident, uplifting)"];
  const t = bank[Math.floor(Math.random()*bank.length)];
  return t.replaceAll("{seed}", seed || "I kept a suitcase full of late-night dreams");
}

document.getElementById('genLyrics').onclick = ()=>{
  const style = document.getElementById('lyricStyle').value;
  const seed = document.getElementById('lyricSeed').value.trim();
  const box = document.getElementById('lyrics');
  box.value = idea(style, seed) + "\n\nBRIDGE:\n(contrast the chorus; flip the perspective)\n\nOUTRO:\n(repeat a hook phrase and fade)";
};
document.getElementById('clearLyrics').onclick = ()=> document.getElementById('lyrics').value='';
document.addEventListener('keydown',e=>{
  if((e.ctrlKey||e.metaKey) && e.key==='Enter') document.getElementById('genLyrics').click();
});

/* To upgrade to real AI later:
   1) Create a serverless endpoint (Netlify Functions / Cloudflare Workers / Vercel) that calls your LLM with your API key.
   2) Replace idea() with a fetch to /api/lyrics passing {style, seed}.
   3) Never expose API keys in GitHub Pages client code.
*/

/* =========================
   C H O R D S
   ========================= */
const MAJOR = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];
const FLAT  = {"C#":"D♭","D#":"E♭","F#":"G♭","G#":"A♭","A#":"B♭"};
const roman = {1:"I",2:"ii",3:"iii",4:"IV",5:"V",6:"vi",7:"vii°"};
const majorScaleSteps=[0,2,4,5,7,9,11];
const minorRel = {"Am":"C","Em":"G","Dm":"F","Bm":"D"};

function noteIndex(n){return MAJOR.indexOf(n)}
function nameFor(n, flat=false){let x=MAJOR[(n+12)%12]; return flat && FLAT[x]?FLAT[x]:x;}
function keyToRoot(key){
  if(key.endsWith('m')) return noteIndex(minorRel[key]);
  return noteIndex(key.replace('♭','A#').replace('B♭','A#').replace('E♭','D#'));
}
function buildChords(key, prog){
  const minor = key.endsWith('m');
  const root = keyToRoot(key);
  const flat = /♭/.test(key) || /B♭|E♭/.test(key);
  const romanOut=[];
  const chordOut=[];
  const degrees = prog.split('-').map(n=>parseInt(n,10));
  for(const d of degrees){
    const idx = root + majorScaleSteps[(d-1)%7];
    let name = nameFor(idx, flat);
    let quality = (d===2||d===3||d===6) ? 'm' : (d===7 ? 'dim' : '');
    if(minor){ // quick relative-minor cheat
      if(d===1||d===4||d===5) quality='m';
      if(d===3) quality='';
    }
    romanOut.push(roman[d]);
    chordOut.push(name + quality);
  }
  return {roman: romanOut.join('  |  '), chords: chordOut.join('  |  ')};
}

let minorSwap=false;
document.getElementById('genChords').onclick=()=>{
  let key = document.getElementById('keySel').value;
  if(minorSwap){
    if(!key.endsWith('m')) key = 'Am';
  }
  const prog = document.getElementById('progSel').value;
  const out = buildChords(key, prog);
  document.getElementById('chordsOut').value =
`Key: ${key}
Prog: ${document.getElementById('progSel').selectedOptions[0].text}
Roman: ${out.roman}
Chords: ${out.chords}`;
};
document.getElementById('swapMode').onclick=()=>{minorSwap=!minorSwap; document.getElementById('genChords').click();}

/* =========================
   M E T R O N O M E
   ========================= */
let ac, clickTimer;
function playClick(){
  const osc = ac.createOscillator();
  const env = ac.createGain();
  osc.frequency.value = 1000; // tick
  env.gain.setValueAtTime(0, ac.currentTime);
  env.gain.linearRampToValueAtTime(0.6, ac.currentTime + 0.001);
  env.gain.exponentialRampToValueAtTime(0.001, ac.currentTime + 0.08);
  osc.connect(env).connect(ac.destination);
  osc.start(); osc.stop(ac.currentTime + 0.09);
}
document.getElementById('startClick').onclick=()=>{
  ac = ac || new (window.AudioContext||window.webkitAudioContext)();
  const bpm = parseInt(document.getElementById('bpm').value||90,10);
  const meter = document.getElementById('meter').value;
  const interval = meter==='6/8' ? (60/bpm)/2 : 60/bpm;
  if(clickTimer) clearInterval(clickTimer);
  clickTimer = setInterval(playClick, interval*1000);
};
document.getElementById('stopClick').onclick=()=>{ if(clickTimer) clearInterval(clickTimer); };

/* =========================
   R E C O R D E R
   ========================= */
let mediaRecorder, chunks=[];
const startBtn = document.getElementById('startRec');
const pauseBtn = document.getElementById('pauseRec');
const stopBtn  = document.getElementById('stopRec');
const list     = document.getElementById('recordings');

async function getStream(){
  return await navigator.mediaDevices.getUserMedia({audio:true});
}
startBtn.onclick = async ()=>{
  const stream = await getStream();
  mediaRecorder = new MediaRecorder(stream, {mimeType:'audio/webm'});
  chunks=[]; mediaRecorder.ondataavailable = e=>{if(e.data.size>0) chunks.push(e.data)};
  mediaRecorder.onstop = ()=>{
    const blob = new Blob(chunks, {type:'audio/webm'});
    const url  = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = `take-${Date.now()}.webm`;
    const audio = document.createElement('audio');
    audio.controls = true; audio.src = url; audio.style.display='block';
    const wrap = document.createElement('div');
    wrap.style.marginTop='8px';
    wrap.appendChild(audio); wrap.appendChild(a);
    list.prepend(wrap);
  };
  mediaRecorder.start();
  startBtn.disabled=true; stopBtn.disabled=false; pauseBtn.disabled=false;
};
pauseBtn.onclick = ()=>{
  if(mediaRecorder?.state==='recording'){ mediaRecorder.pause(); pauseBtn.textContent='Resume'; }
  else if(mediaRecorder?.state==='paused'){ mediaRecorder.resume(); pauseBtn.textContent='Pause'; }
};
stopBtn.onclick = ()=>{
  mediaRecorder?.stop();
  startBtn.disabled=false; stopBtn.disabled=true; pauseBtn.disabled=true; pauseBtn.textContent='Pause';
};

/* =========================
   C O V E R   A R T
   ========================= */
const canvas = document.getElementById('artCanvas');
const ctx = canvas.getContext('2d');
function renderArt(img){
  // BG gradient
  const g = ctx.createLinearGradient(0,0,3000,3000);
  g.addColorStop(0,'#0e1424'); g.addColorStop(.6,'#0a0f1a'); g.addColorStop(1,'#091627');
  ctx.fillStyle=g; ctx.fillRect(0,0,3000,3000);

  if(img){ // draw uploaded
    const s = Math.max(3000/img.width, 3000/img.height);
    const w = img.width*s, h = img.height*s;
    ctx.globalAlpha=0.85;
    ctx.drawImage(img,(3000-w)/2,(3000-h)/2,w,h);
    ctx.globalAlpha=1;
  }

  // Text
  const title = document.getElementById('artTitle').value || 'Song Title';
  const artist= document.getElementById('artArtist').value || 'Artist';
  ctx.fillStyle='#ffffff';
  ctx.textAlign='center';
  ctx.font='bold 200px Inter, Arial, sans-serif';
  ctx.fillText(title.toUpperCase(), 1500, 1700, 2700);
  ctx.fillStyle='#a7d363';
  ctx.font='600 120px Inter, Arial, sans-serif';
  ctx.fillText(artist, 1500, 1880, 2600);

  // Download link
  const link = document.getElementById('downloadArt');
  link.href = canvas.toDataURL('image/jpeg', 0.92);
  link.style.display='inline-block';
}
document.getElementById('renderArt').onclick = ()=>{
  const file = document.getElementById('artImage').files[0];
  if(!file){ renderArt(); return; }
  const img = new Image();
  img.onload = ()=> renderArt(img);
  img.src = URL.createObjectURL(file);
};
</script>
</body>
</html>
